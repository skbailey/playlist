// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "backbone", "templates/playlist", "models/song", "views/song"], function($, Backbone, playlistTemplate, SongModel, SongView) {
    var PlaylistView, _ref;

    return PlaylistView = (function(_super) {
      __extends(PlaylistView, _super);

      function PlaylistView() {
        _ref = PlaylistView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      PlaylistView.prototype.tagName = "li";

      PlaylistView.prototype.events = {
        "click .remove-playlist": "delete",
        "click .icon-edit": "edit",
        "click .icon-plus": "showAddSongsForm",
        "click .song-creator .icon-remove": "hideAddSongsForm",
        "submit .song-creator": "addSong",
        "keypress input.title": "update"
      };

      PlaylistView.prototype.initialize = function() {
        this.model.on("destroy", this.removeView, this);
        this.model.on("add:model", this.addSongView, this);
        return this.model.on("songs:created", this.addSongToPlaylist, this);
      };

      PlaylistView.prototype.render = function() {
        var playlistSongs, renderedContent, _ref1,
          _this = this;

        renderedContent = playlistTemplate['playlist.hbs']({
          name: this.model.get('name'),
          id: this.model.id
        });
        this.$el.html(renderedContent);
        if ((_ref1 = this.songs) == null) {
          this.songs = this.$(".songs");
        }
        playlistSongs = this.model.get("songs");
        playlistSongs.forEach(function(song) {
          var songView;

          songView = new SongView({
            model: new SongModel(song)
          });
          return _this.songs.append(songView.render().el);
        });
        return this;
      };

      PlaylistView.prototype["delete"] = function(evt) {
        return this.model.destroy();
      };

      PlaylistView.prototype.removeView = function() {
        return this.remove();
      };

      PlaylistView.prototype.edit = function() {
        this.inputEdit = this.$('input.title').show();
        return this.spanEdit = this.$('span.title').hide();
      };

      PlaylistView.prototype.showAddSongsForm = function() {
        var _ref1;

        if ((_ref1 = this.addSongsForm) == null) {
          this.addSongsForm = this.$(".song-creator");
        }
        return this.addSongsForm.show();
      };

      PlaylistView.prototype.hideAddSongsForm = function() {
        return this.addSongsForm.hide();
      };

      PlaylistView.prototype.addSong = function(evt) {
        var artistInput, songInput;

        evt.preventDefault();
        artistInput = this.$("input.artist");
        songInput = this.$("input.song");
        this.model.addSong({
          artist: artistInput.val(),
          song: songInput.val()
        });
        artistInput.val("");
        return songInput.val("");
      };

      PlaylistView.prototype.addSongView = function() {
        var songView;

        songView = new SongView({
          model: this.model.getLastSong()
        });
        return this.songs.append(songView.render().el);
      };

      PlaylistView.prototype.addSongToPlaylist = function() {
        return console.log("adding songs to playlist");
      };

      PlaylistView.prototype.update = function(evt) {
        var newTitle;

        if (evt.which !== 13) {
          return;
        }
        newTitle = this.inputEdit.val();
        if ($.trim(newTitle) !== "") {
          this.spanEdit.text(newTitle);
          this.model.set('title', newTitle);
          this.model.save();
        }
        this.inputEdit.hide();
        return this.spanEdit.show();
      };

      return PlaylistView;

    })(Backbone.View);
  });

}).call(this);
